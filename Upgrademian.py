import pandas as pd
import streamlit as st
import io
import re

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(layout="wide")
st.title("üìä Dashboard ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå")
st.markdown("---")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily Reports    
def process_daily_reports(uploaded_files):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå Daily Reports ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    """
    data = []
    
    # üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    if not uploaded_files:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Daily Report")
        return pd.DataFrame()

    for file in uploaded_files:
        try:
            # üí° ‡πÉ‡∏ä‡πâ io.BytesIO ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ pandas ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Streamlit ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
            df = pd.read_excel(io.BytesIO(file.getvalue()))
            
            filename = file.name
            # üîç ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ regex ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            match = re.search(r"Daily report_(\d+)_?([^.]*)\.xls", filename, re.IGNORECASE)
            if match:
                date_str = match.group(1)
                # üí° ‡πÉ‡∏ä‡πâ .strip() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                team_member = match.group(2).replace("_", " ").strip()
            else:
                date_str = "0"
                team_member = "Unknown"

            if "Status" not in df.columns or "Candidate Name" not in df.columns:
                st.warning(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå {filename} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Status' ‡∏´‡∏£‡∏∑‡∏≠ 'Candidate Name'")
                continue

            passed = df[df["Status"] == "Pass"]

            for _, row in passed.iterrows():
                data.append({
                    "Employee Name": row["Candidate Name"],
                    "Team Member": team_member,
                    "Date": date_str
                })
        except Exception as e:
            st.error(f"‚ùå Error reading {file.name}: {e}")

    daily_df = pd.DataFrame(data)
    if not daily_df.empty:
        daily_df = daily_df.sort_values("Date").drop_duplicates(subset=["Employee Name"], keep="first")
        daily_df.drop(columns=["Date"], inplace=True)
    
    return daily_df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö New Employees
def process_new_employees(uploaded_file):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå New Employees ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    """
    if not uploaded_file:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå New Employee")
        return pd.DataFrame()

    try:
        df = pd.read_excel(io.BytesIO(uploaded_file.getvalue()))
        df = df.drop(columns=["DOB", "ID Card"], errors='ignore')
        if 'Join Date' in df.columns:
            df['Join Date'] = pd.to_datetime(df['Join Date'], errors='coerce').dt.date
        return df
    except Exception as e:
        st.error(f"‚ùå Error reading {uploaded_file.name}: {e}")
        return pd.DataFrame()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def merge_and_create_dashboard(daily_df, new_emp_df):
    """
    ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Dashboard
    """
    if daily_df.empty or new_emp_df.empty:
        return pd.DataFrame()
    
    daily_df["Employee Name"] = daily_df["Employee Name"].astype(str).str.strip()
    new_emp_df["Employee Name"] = new_emp_df["Employee Name"].astype(str).str.strip()

    merged = pd.merge(new_emp_df, daily_df, how='left', on="Employee Name")
    merged["Team Member"] = merged["Team Member"].fillna("Unknown")

    final_dashboard = merged[["Employee Name", "Join Date", "Role", "Team Member"]]
    return final_dashboard

# --- UI (User Interface) ‡∏Ç‡∏≠‡∏á Streamlit ---

# üíª ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
col1, col2 = st.columns(2)

with col1:
    st.subheader("1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Daily Reports (‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ)")
    uploaded_daily_files = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå 'Daily report_...'",
        type=["xls", "xlsx"],
        accept_multiple_files=True
    )

with col2:
    st.subheader("2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå New Employees (‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)")
    uploaded_new_emp_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå 'New Employee_...'",
        type=["xls", "xlsx"]
    )

# üö¶ ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
if st.button("üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard"):
    if uploaded_daily_files and uploaded_new_emp_file:
        # ü§ñ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
            daily_df = process_daily_reports(uploaded_daily_files)
            new_emp_df = process_new_employees(uploaded_new_emp_file)
        
        if not daily_df.empty and not new_emp_df.empty:
            dashboard = merge_and_create_dashboard(daily_df, new_emp_df)
            
            if not dashboard.empty:
                st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
                st.markdown("---")
                st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ Dashboard")
                st.dataframe(dashboard, use_container_width=True) # ‡πÅ‡∏™‡∏î‡∏á DataFrame ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏ö
                
                # üì• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                excel_buffer = io.BytesIO()
                dashboard.to_excel(excel_buffer, index=False, engine='xlsxwriter')
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Dashboard ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel",
                    data=excel_buffer.getvalue(),
                    file_name="dashboard_output.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            else:
                st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
        else:
            st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
    else:
        st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 2 ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard'")